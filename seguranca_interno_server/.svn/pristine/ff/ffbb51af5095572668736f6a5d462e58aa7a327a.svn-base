package br.gov.ma.tce.seguranca.interno.server.beans.timerservice;

import java.util.Date;
import java.util.List;
import java.util.logging.Logger;

import javax.ejb.Schedule;
import javax.ejb.Stateless;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import br.gov.ma.tce.seguranca.interno.server.beans.dependente.Dependente;
import br.gov.ma.tce.seguranca.interno.server.beans.dependente.DependenteFacadeBean;
import br.gov.ma.tce.seguranca.interno.server.beans.servidor.Servidor;
import br.gov.ma.tce.seguranca.interno.server.beans.servidor.ServidorFacadeBean;
import br.gov.ma.tce.seguranca.interno.server.beans.usuario.Usuario;
import br.gov.ma.tce.seguranca.interno.server.beans.usuario.UsuarioFacadeBean;
import br.gov.ma.tce.seguranca.server.beans.dependenteparentesco.DependenteParentescoFacadeBean;
import br.gov.ma.tce.seguranca.server.beans.funcionario.Funcionario;
import br.gov.ma.tce.seguranca.server.beans.funcionario.FuncionarioFacadeBean;

/**
 * Serviço que irá verificar atualizações de dados no seguranca_cache_server e
 * persistirá no seguranca_interno_server.
 * 
 * @author jorgeribeiro
 *
 */
@Stateless
public class TimerService {
	Integer maxIdServidor, maxIdFuncionario, maxIdDependente, maxIdDependenteSeg;
	
	private ServidorFacadeBean servidorFacadeBean;
	private UsuarioFacadeBean usuarioFacadeBean;
	private DependenteFacadeBean dependenteFacadeBean;
	private FuncionarioFacadeBean funcionarioFacadeBean;
	private br.gov.ma.tce.seguranca.server.beans.dependente.DependenteFacadeBean dependenteSegFacadeBean;
	private DependenteParentescoFacadeBean dependenteParentescoFacadeBean;
	
	static Logger log;
	
	public TimerService() {
		try {
			InitialContext ctx = new InitialContext();
			servidorFacadeBean = (ServidorFacadeBean) ctx.lookup(ServidorFacadeBean.URI);
			usuarioFacadeBean = (UsuarioFacadeBean) ctx.lookup(UsuarioFacadeBean.URI);
			dependenteFacadeBean = (DependenteFacadeBean) ctx.lookup(DependenteFacadeBean.URI);
			funcionarioFacadeBean = (FuncionarioFacadeBean) ctx.lookup(FuncionarioFacadeBean.JNDI_SEGURANCA);
			dependenteSegFacadeBean = (br.gov.ma.tce.seguranca.server.beans.dependente.DependenteFacadeBean) ctx
					.lookup(br.gov.ma.tce.seguranca.server.beans.dependente.DependenteFacadeBean.JNDI_SEGURANCA);
			dependenteParentescoFacadeBean = (DependenteParentescoFacadeBean) ctx
					.lookup(DependenteParentescoFacadeBean.JNDI_SEGURANCA);
		} catch (NamingException e) {
			e.printStackTrace();
		}
	}
	
	@Schedule(hour = "5", persistent = false)
	public void novosUsuariosService() {
		try {
			log.info("Execução de Service para criação de novos usuários. Data/hora: " + new Date());			
			maxIdServidor = servidorFacadeBean.findMaxId();
			maxIdFuncionario = funcionarioFacadeBean.findMaxId();
			
			// Se for diferente, existem funcionários novos
			if (maxIdServidor != maxIdFuncionario) {
				// Percorre cada um dos novos IDs e insere na lista de funcionários
				for (int i = maxIdServidor + 1; i <= maxIdFuncionario; i++) {
					Funcionario f = funcionarioFacadeBean.findById(i);
					if (f != null) {
						Servidor s = copiaFuncionario(f);
						servidorFacadeBean.insert(s);
						
						Usuario novoUsuario = new Usuario(usuarioFacadeBean.findMaxId() + 1, s, s.getMatricula(), null);
						usuarioFacadeBean.insert(novoUsuario);
						
						// Dependentes do funcionário
						List<br.gov.ma.tce.seguranca.server.beans.dependente.Dependente> dependentes = dependenteSegFacadeBean
								.findDependenteByFuncionarioId(s.getServidorId());
						for (br.gov.ma.tce.seguranca.server.beans.dependente.Dependente d : dependentes) {
							Dependente novoDependente = copiaDependente(d, s);
							dependenteFacadeBean.insert(novoDependente);
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}
	
	public Servidor copiaFuncionario(Funcionario funcionario) {
		Servidor novoServidor = new Servidor();
		if (funcionario.getCodigo() != null) {
			novoServidor.setServidorId(funcionario.getCodigo());
		}

		if (funcionario.getFuncionarioFuncional().getLotacaoContracheque() != null) {
			novoServidor.setLotacaoContracheque(
					funcionario.getFuncionarioFuncional().getLotacaoContracheque().getDescricao());
		}

		if (funcionario.getFuncionarioFuncional().getLotacaoOrigem() != null) {
			novoServidor.setLotacaoOrigem(funcionario.getFuncionarioFuncional().getLotacaoOrigem().getDescricao());
		}

		if (funcionario.getFuncionarioFuncional().getLotacaoExercicio() != null) {
			novoServidor
					.setLotacaoExercicio(funcionario.getFuncionarioFuncional().getLotacaoExercicio().getDescricao());
			novoServidor.setSetorSigla(funcionario.getFuncionarioFuncional().getLotacaoExercicio().getSigla());
			novoServidor.setLotacaoExercicioId(funcionario.getFuncionarioFuncional().getLotacaoExercicio().getId());
			novoServidor.setLotacaoSubordinacao(
					funcionario.getFuncionarioFuncional().getLotacaoExercicio().getLotacaoSubordinacao());
			novoServidor.setLotacaoExercicioTelefone(
					funcionario.getFuncionarioFuncional().getLotacaoExercicio().getTelefonePrincipal());
		}

		if (funcionario.getFuncionarioFuncional().getCargoFuncao() != null) {
			novoServidor.setCargoFuncao(funcionario.getFuncionarioFuncional().getCargoFuncao().getDescricao());
			novoServidor.setCargoFuncaoId(funcionario.getFuncionarioFuncional().getCargoFuncao().getId());

			if (funcionario.getFuncionarioFuncional().getCargoFuncao().getFuncao() != null) {
				novoServidor.setFuncaoHierarquia(
						funcionario.getFuncionarioFuncional().getCargoFuncao().getFuncao().getHierarquia());
			}
		}

		if (funcionario.getFuncionarioFuncional().getCargoEfetivo() != null) {
			novoServidor.setCargoEfetivo(funcionario.getFuncionarioFuncional().getCargoEfetivo().getDescricao());
		}

		if (funcionario.getMatricula() != null) {
			novoServidor.setMatricula(funcionario.getMatricula());
		}

		if (funcionario.getNome() != null) {
			novoServidor.setNome(funcionario.getNomeFuncionario());
		}

		if (funcionario.getPessoa() != null) {
			novoServidor.setCpf(funcionario.getPessoa().getCpf());
			novoServidor.setDataNascimento(funcionario.getPessoa().getDataNascimento());
			novoServidor.setTipoSanguineo(funcionario.getPessoa().getTipoSanguineoFormatado());
			novoServidor.setDoador(funcionario.getPessoa().getDoadorFormatado());
			novoServidor.setEmail(funcionario.getPessoa().getEmail());
			novoServidor.setDataAdmissao(funcionario.getPessoa().getDataAdmissao());
			novoServidor.setSexo(funcionario.getPessoa().getSexoFormatado());
			novoServidor.setTelefone(funcionario.getPessoa().getTelefone());
		}

		return novoServidor;
	}

	public Usuario copiaUsuario(br.gov.ma.tce.seguranca.server.beans.usuario.Usuario usuario, Servidor s) {
		Usuario novoUsuario = new Usuario();
		if (usuario.getUsuarioId() != null) {
			novoUsuario.setUsuarioId(usuarioFacadeBean.findMaxId() + 1);
		}

		if (usuario.getMatricula() != null) {
			novoUsuario.setMatricula(usuario.getMatricula());
		}

		if (usuario.getSenha() != null) {
			novoUsuario.setSenha(usuario.getSenha());
		}

		novoUsuario.setServidor(s);

		return novoUsuario;
	}

	public Dependente copiaDependente(br.gov.ma.tce.seguranca.server.beans.dependente.Dependente dependente,
			Servidor s) {
		Dependente novoDependente = new Dependente();
		if (dependente.getId() != null) {
			novoDependente.setDependenteId(dependente.getId());
		}

		if (dependente.getDataNasc() != null) {
			novoDependente.setDataNascimento(dependente.getDataNasc());
		} else {

			novoDependente.setDataNascimento(null);
		}

		if (dependente.getNome() != null) {
			novoDependente.setNome(dependente.getNomeDependente());
		} else {

			novoDependente.setNome(null);
		}

		if (dependente.getSexoFormatado() != null) {
			novoDependente.setSexo(dependente.getSexoFormatado());
		} else {

			novoDependente.setSexo(null);
		}

		if (dependente.getParentesco() != null) {
			novoDependente.setParentesco(
					dependenteParentescoFacadeBean.findByPrimaryKey(dependente.getParentesco()).getDescricao());
		} else {

			novoDependente.setParentesco(null);
		}

		if (dependente.getTipoSangue() != null) {
			novoDependente.setTipoSanguineo(dependente.getTipoSangue());
		} else {

			novoDependente.setTipoSanguineo(null);
		}

		if (dependente.getTelefone() != null) {
			novoDependente.setTelefone(dependente.getTelefone());
		} else {

			novoDependente.setTelefone(null);
		}

		if (dependente.getDataExclusao() != null) {
			novoDependente.setDataExclusao(dependente.getDataExclusao());
		} else {

			novoDependente.setDataExclusao(null);
		}

		novoDependente.setServidor(s);

		return novoDependente;
	}

	public Dependente copiaDependente(br.gov.ma.tce.seguranca.server.beans.dependente.Dependente dependente) {
		Dependente novoDependente = new Dependente();
		if (dependente.getId() != null) {
			novoDependente.setDependenteId(dependente.getId());
		}

		if (dependente.getServidor() != null) {
			novoDependente.setServidor(servidorFacadeBean.findByPrimaryKey(dependente.getServidor()));
		}

		if (dependente.getDataNasc() != null) {
			novoDependente.setDataNascimento(dependente.getDataNasc());
		}

		if (dependente.getNome() != null) {
			novoDependente.setNome(dependente.getNomeDependente());
		}

		if (dependente.getSexoFormatado() != null) {
			novoDependente.setSexo(dependente.getSexoFormatado());
		}

		if (dependente.getParentesco() != null) {
			novoDependente.setParentesco(
					dependenteParentescoFacadeBean.findByPrimaryKey(dependente.getParentesco()).getDescricao());
		}

		if (dependente.getTipoSangue() != null) {
			novoDependente.setTipoSanguineo(dependente.getTipoSangue());
		}

		if (dependente.getTelefone() != null) {
			novoDependente.setTelefone(dependente.getTelefone());
		}

		if (dependente.getDataExclusao() != null) {
			novoDependente.setDataExclusao(dependente.getDataExclusao());
		}

		return novoDependente;
	}
}
