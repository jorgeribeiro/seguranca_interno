package br.gov.ma.tce.seguranca.pages;

import java.util.ArrayList;
import java.util.Collection;

import javax.naming.InitialContext;
import javax.naming.NamingException;

import org.zkoss.bind.annotation.AfterCompose;
import org.zkoss.bind.annotation.BindingParam;
import org.zkoss.bind.annotation.Command;
import org.zkoss.bind.annotation.ContextParam;
import org.zkoss.bind.annotation.ContextType;
import org.zkoss.bind.annotation.Init;
import org.zkoss.bind.annotation.NotifyChange;
import org.zkoss.zk.ui.Component;
import org.zkoss.zk.ui.select.Selectors;
import org.zkoss.zk.ui.select.annotation.Wire;
import org.zkoss.zk.ui.util.Clients;
import org.zkoss.zul.Window;

import br.gov.ma.tce.seguranca.interno.server.beans.usuario.Usuario;
import br.gov.ma.tce.seguranca.interno.server.beans.usuario.UsuarioFacadeBean;
import br.gov.ma.tce.seguranca.interno.server.beans.usuariogrupo.UsuarioGrupo;
import br.gov.ma.tce.seguranca.interno.server.beans.usuariogrupo.UsuarioGrupoFacadeBean;
import br.gov.ma.tce.seguranca.interno.server.exception.BusinessException;

public class UsuarioVM {
	private Usuario novoUsuario, usuarioSelecionado;

	private String nome, matricula, repeteSenha;

	private Collection<Usuario> usuarios;
	private Collection<UsuarioGrupo> usuarioGrupos;

	private UsuarioFacadeBean usuarioFacade;
	private UsuarioGrupoFacadeBean usuarioGrupoFacade;

	@Wire("#modalGerenciarUsuario")
	private Window modalGerenciarUsuario;

	@Wire("#modalVisualizarGrupos")
	private Window modalVisualizarGrupos;

	public UsuarioVM() {
		try {
			InitialContext ctx = new InitialContext();
			usuarioFacade = (UsuarioFacadeBean) ctx.lookup(UsuarioFacadeBean.URI);
			usuarioGrupoFacade = (UsuarioGrupoFacadeBean) ctx.lookup(UsuarioGrupoFacadeBean.URI);
		} catch (NamingException e) {
			e.printStackTrace();
		}
	}

	@Init
	public void init() {
		usuarios = new ArrayList<Usuario>();
	}

	@AfterCompose
	public void afterCompose(@ContextParam(ContextType.VIEW) Component view) {
		Selectors.wireComponents(view, this, false);
	}

	@Command
	@NotifyChange(".")
	public void aplicarFiltro() {
		try {
			if ((matricula == null || matricula.trim().isEmpty()) && (nome == null || nome.trim().isEmpty())) {
				throw new Exception("Preencha pelo menos um dos campos de filtro.");
			}

			usuarios = usuarioFacade.findByFiltro(matricula, nome);
			if (usuarios.isEmpty()) {
				throw new Exception("Não foram encontrados usuários com as informações inseridas.");
			}
		} catch (Exception e) {
			Clients.showNotification(e.getMessage(), Clients.NOTIFICATION_TYPE_WARNING, null, null, 3000, true);
		}
	}

	@Command
	@NotifyChange(".")
	public void abrirModalGerenciarUsuario(@BindingParam("visible") boolean visible,
			@BindingParam("usuario") Usuario usuario) {
		try {
			usuarioSelecionado = usuario;
			usuarioSelecionado.setSenha(null);
			modalGerenciarUsuario.setVisible(visible);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Command
	@NotifyChange(".")
	public void atualizarUsuario() {
		try {
			if ((usuarioSelecionado.getSenha() == null || usuarioSelecionado.getSenha().trim().isEmpty())
					|| (repeteSenha == null || repeteSenha.trim().isEmpty())) {
				throw new BusinessException("Preencha todos os campos de senha exibidos.");
			} else if (!usuarioSelecionado.getSenha().equals(repeteSenha)) {
				throw new BusinessException("As senhas informadas não coincidem.");
			}

			modalGerenciarUsuario.setVisible(false);
			usuarioFacade.update(usuarioSelecionado);
		} catch (BusinessException e) {
			Clients.showNotification(e.getMessage(), Clients.NOTIFICATION_TYPE_WARNING, null, null, 3000, true);
		}
	}

	@Command
	@NotifyChange(".")
	public void abrirModalVisualizarGrupos(@BindingParam("visible") boolean visible,
			@BindingParam("usuario") Usuario usuario) {
		try {
			if (visible) {
				usuarioGrupos = usuarioGrupoFacade.findGruposByUsuario(usuario);
			}
			usuarioSelecionado = usuario;
			modalVisualizarGrupos.setVisible(visible);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public Usuario getNovoUsuario() {
		return novoUsuario;
	}

	public void setNovoUsuario(Usuario novoUsuario) {
		this.novoUsuario = novoUsuario;
	}

	public Usuario getUsuarioSelecionado() {
		return usuarioSelecionado;
	}

	public void setUsuarioSelecionado(Usuario usuarioSelecionado) {
		this.usuarioSelecionado = usuarioSelecionado;
	}

	public String getNome() {
		return nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	public String getMatricula() {
		return matricula;
	}

	public void setMatricula(String matricula) {
		this.matricula = matricula;
	}

	public String getRepeteSenha() {
		return repeteSenha;
	}

	public void setRepeteSenha(String repeteSenha) {
		this.repeteSenha = repeteSenha;
	}

	public Collection<Usuario> getUsuarios() {
		return usuarios;
	}

	public void setUsuarios(Collection<Usuario> usuarios) {
		this.usuarios = usuarios;
	}

	public Collection<UsuarioGrupo> getUsuarioGrupos() {
		return usuarioGrupos;
	}

	public void setUsuarioGrupos(Collection<UsuarioGrupo> usuarioGrupos) {
		this.usuarioGrupos = usuarioGrupos;
	}

}
