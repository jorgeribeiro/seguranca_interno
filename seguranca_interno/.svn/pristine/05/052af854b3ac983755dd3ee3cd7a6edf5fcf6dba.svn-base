package br.gov.ma.tce.seguranca.pages;

import java.util.ArrayList;
import java.util.Collection;

import javax.naming.InitialContext;
import javax.naming.NamingException;

import org.zkoss.bind.annotation.AfterCompose;
import org.zkoss.bind.annotation.BindingParam;
import org.zkoss.bind.annotation.Command;
import org.zkoss.bind.annotation.ContextParam;
import org.zkoss.bind.annotation.ContextType;
import org.zkoss.bind.annotation.Init;
import org.zkoss.bind.annotation.NotifyChange;
import org.zkoss.zk.ui.Component;
import org.zkoss.zk.ui.Sessions;
import org.zkoss.zk.ui.select.Selectors;
import org.zkoss.zk.ui.select.annotation.Wire;
import org.zkoss.zk.ui.util.Clients;
import org.zkoss.zul.Window;

import br.gov.ma.tce.seguranca.interno.server.beans.grupousuario.GrupoUsuario;
import br.gov.ma.tce.seguranca.interno.server.beans.grupousuario.GrupoUsuarioFacadeBean;
import br.gov.ma.tce.seguranca.interno.server.beans.servidor.Servidor;
import br.gov.ma.tce.seguranca.interno.server.beans.servidor.ServidorFacadeBean;
import br.gov.ma.tce.seguranca.interno.server.beans.usuario.Usuario;
import br.gov.ma.tce.seguranca.interno.server.beans.usuario.UsuarioFacadeBean;
import br.gov.ma.tce.seguranca.interno.server.beans.usuariogrupo.UsuarioGrupo;
import br.gov.ma.tce.seguranca.interno.server.beans.usuariogrupo.UsuarioGrupoFacadeBean;
import br.gov.ma.tce.seguranca.server.beans.funcionario.Funcionario;
import br.gov.ma.tce.seguranca.server.beans.funcionario.FuncionarioFacadeBean;

public class IndexVM {
	Integer maxIdServidor, maxIdFuncionario;
	private Usuario usuario;

	private Collection<Funcionario> funcionarios;

	private ServidorFacadeBean servidorFacadeBean;
	private UsuarioFacadeBean usuarioFacadeBean;
	private GrupoUsuarioFacadeBean grupoUsuarioFacadeBean;
	private UsuarioGrupoFacadeBean usuarioGrupoFacadeBean;
	private FuncionarioFacadeBean funcionarioFacadeBean;
	private br.gov.ma.tce.seguranca.server.beans.usuario.UsuarioFacadeBean usuarioSegFacadeBean;

	@Wire("#modalVerificaNovosUsuarios")
	private Window modalVerificaNovosUsuarios;

	public IndexVM() {
		try {
			InitialContext ctx = new InitialContext();
			servidorFacadeBean = (ServidorFacadeBean) ctx.lookup(ServidorFacadeBean.URI);
			usuarioFacadeBean = (UsuarioFacadeBean) ctx.lookup(UsuarioFacadeBean.URI);
			grupoUsuarioFacadeBean = (GrupoUsuarioFacadeBean) ctx.lookup(GrupoUsuarioFacadeBean.URI);
			usuarioGrupoFacadeBean = (UsuarioGrupoFacadeBean) ctx.lookup(UsuarioGrupoFacadeBean.URI);
			funcionarioFacadeBean = (FuncionarioFacadeBean) ctx.lookup(FuncionarioFacadeBean.JNDI_SEGURANCA);
			usuarioSegFacadeBean = (br.gov.ma.tce.seguranca.server.beans.usuario.UsuarioFacadeBean) ctx
					.lookup(br.gov.ma.tce.seguranca.server.beans.usuario.UsuarioFacadeBean.JNDI_SEGURANCA);
		} catch (NamingException e) {
			e.printStackTrace();
		}
	}

	@Init
	public void init() {
		usuario = (Usuario) Sessions.getCurrent().getAttribute("usuario");
	}

	@AfterCompose
	public void afterCompose(@ContextParam(ContextType.VIEW) Component view) {
		Selectors.wireComponents(view, this, false);
	}

	@Command
	@NotifyChange(".")
	public void abrirModalVerificaNovosUsuarios(@BindingParam("visible") Boolean visible) {
		try {
			if (visible) {
				funcionarios = new ArrayList<Funcionario>();
				maxIdServidor = servidorFacadeBean.findMaxId();
				maxIdFuncionario = funcionarioFacadeBean.findMaxId();

				// Se for diferente, existem funcionários novos
				if (maxIdServidor != maxIdFuncionario) {
					// Percorre cada um dos novos IDs e insere na lista de funcionários
					for (int i = maxIdServidor + 1; i <= maxIdFuncionario; i++) {
						Funcionario f = funcionarioFacadeBean.findById(i);
						if (f != null) {
							funcionarios.add(f);
						}
					}
				}
			}

			modalVerificaNovosUsuarios.setVisible(visible);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Command
	@NotifyChange(".")
	public void criarNovosUsuarios() {
		try {
			// Cria um novo servidor e usuário para cada funcionário
			for (Funcionario f : funcionarios) {
				// Novo servidor
				Servidor novoServidor = copiaFuncionario(f);
				servidorFacadeBean.insert(novoServidor);

				// Novo usuário
				br.gov.ma.tce.seguranca.server.beans.usuario.Usuario u = usuarioSegFacadeBean
						.findByLoginComGrupos(novoServidor.getMatricula().toString());

				Usuario novoUsuario;
				if (u != null) {
					novoUsuario = copiaUsuario(u, novoServidor);
					// Busca grupos e insere no novo usuário
					for (br.gov.ma.tce.seguranca.server.beans.usuariogrupo.UsuarioGrupo ug : u.getUsuarioGrupos()) {
						GrupoUsuario gu = grupoUsuarioFacadeBean
								.findByPrimaryKey(ug.getGrupoUsuario().getGrupoUsuarioId());
						// Cria grupo apenas se Grupo Usuário foi encontrado
						if (gu != null) {
							UsuarioGrupo novoUsuarioGrupo = new UsuarioGrupo();
							novoUsuarioGrupo.setUsuario(novoUsuario);
							novoUsuarioGrupo.setGrupoUsuario(gu);
							usuarioGrupoFacadeBean.insert(novoUsuarioGrupo);
						}
					}
				} else {
					// Se usuário ainda não existe, cria um novo com senha igual à matrícula
					novoUsuario = new Usuario(usuarioFacadeBean.findMaxId() + 1, novoServidor,
							novoServidor.getMatricula(), null);
				}
				usuarioFacadeBean.insert(novoUsuario);
			}
			modalVerificaNovosUsuarios.setVisible(false);
			funcionarios = new ArrayList<Funcionario>();
			Clients.showNotification("Usuários copiados com sucesso!", Clients.NOTIFICATION_TYPE_INFO, null, null, 3000,
					true);
		} catch (Exception e) {
			Clients.showNotification("Ocorreu um erro ao copiar novos usuários. Tente novamente mais tarde.",
					Clients.NOTIFICATION_TYPE_WARNING, null, null, 3000, true);
		}
	}

	public Servidor copiaFuncionario(Funcionario funcionario) {
		Servidor novoServidor = new Servidor();
		if (funcionario.getCodigo() != null) {
			novoServidor.setServidorId(funcionario.getCodigo());
		}

		if (funcionario.getFuncionarioFuncional().getLotacaoContracheque() != null) {
			novoServidor.setLotacaoContracheque(
					funcionario.getFuncionarioFuncional().getLotacaoContracheque().getDescricao());
		}

		if (funcionario.getFuncionarioFuncional().getLotacaoOrigem() != null) {
			novoServidor.setLotacaoOrigem(funcionario.getFuncionarioFuncional().getLotacaoOrigem().getDescricao());
		}

		if (funcionario.getFuncionarioFuncional().getLotacaoExercicio() != null) {
			novoServidor
					.setLotacaoExercicio(funcionario.getFuncionarioFuncional().getLotacaoExercicio().getDescricao());
			novoServidor.setSetorSigla(funcionario.getFuncionarioFuncional().getLotacaoExercicio().getSigla());
			novoServidor.setLotacaoExercicioId(funcionario.getFuncionarioFuncional().getLotacaoExercicio().getId());
		}

		if (funcionario.getFuncionarioFuncional().getCargoFuncao() != null) {
			novoServidor.setCargoFuncao(funcionario.getFuncionarioFuncional().getCargoFuncao().getDescricao());
		}

		if (funcionario.getFuncionarioFuncional().getCargoEfetivo() != null) {
			novoServidor.setCargoEfetivo(funcionario.getFuncionarioFuncional().getCargoEfetivo().getDescricao());
		}

		if (funcionario.getMatricula() != null) {
			novoServidor.setMatricula(funcionario.getMatricula());
		}

		if (funcionario.getNome() != null) {
			novoServidor.setNome(funcionario.getNomeFuncionario());
		}

		if (funcionario.getPessoa() != null) {
			novoServidor.setCpf(funcionario.getPessoa().getCpf());
			novoServidor.setDataNascimento(funcionario.getPessoa().getDataNascimento());
			novoServidor.setTipoSanguineo(funcionario.getPessoa().getTipoSanguineoFormatado());
			novoServidor.setDoador(funcionario.getPessoa().getDoadorFormatado());
			novoServidor.setEmail(funcionario.getPessoa().getEmail());
			novoServidor.setDataAdmissao(funcionario.getPessoa().getDataAdmissao());
			novoServidor.setSexo(funcionario.getPessoa().getSexoFormatado());
			novoServidor.setTelefone(funcionario.getPessoa().getTelefone());
		}

		return novoServidor;
	}

	public Usuario copiaUsuario(br.gov.ma.tce.seguranca.server.beans.usuario.Usuario usuario, Servidor s) {
		Usuario novoUsuario = new Usuario();
		if (usuario.getUsuarioId() != null) {
			novoUsuario.setUsuarioId(usuarioFacadeBean.findMaxId() + 1);
		}

		if (usuario.getMatricula() != null) {
			novoUsuario.setMatricula(usuario.getMatricula());
		}

		if (usuario.getSenha() != null) {
			novoUsuario.setSenha(usuario.getSenha());
		}

		novoUsuario.setServidor(s);

		return novoUsuario;
	}

	public Usuario getUsuario() {
		return usuario;
	}

	public void setUsuario(Usuario usuario) {
		this.usuario = usuario;
	}

	public Collection<Funcionario> getFuncionarios() {
		return funcionarios;
	}

	public void setFuncionarios(Collection<Funcionario> funcionarios) {
		this.funcionarios = funcionarios;
	}

}
